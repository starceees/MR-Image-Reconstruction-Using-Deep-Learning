import torch 
import torch.nn as nn
import torch.nn.functional as f 


class DoubleConv(nn.Module):
    """
    Two Consecutive convolutions followed by Relu activation
    """
    def __init__(self, in_channels, out_channels):
        super(DoubleConv, self).__init__()
        self.conv == nn.sequential(
            nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1),
            nn.ReLU(inplace=True)
        )
    def forward(self, x):
        return self.conv(x)

class UNet(nn.Module):
    """
    Classic Unet implementation out_channels = number of classes 
    """
    def __init__(self, int_channels=3, out_channels=2, features=(64,128,256,512)):
        super(UNet, self).__init__()

        #Downsampling Path 
        self.downs = nn.ModuleList()
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)

        #Create the encoder: multiple DOubleConv Layers 
        prev_channels = in_channels
        for feature in features:
            self.downs.append(DoubleConv(prev_channels, features))
            prev_channels = feature

        # BottleNeck 
        self.bottleneck = DoubleConv(features[-1], features[-1]*2)

        #Create the decoder :
        # For each feature in reverese , we do transpose conv + DoubleConv
        for feature in reveresed(features):
            self.ups.append(
                nn.ConvTranspose2d(feature*2, feature, kernel_size=2,stride=2)
            )
            self.ups.append(DoubleConv(features*2, feature))


        # Final 1x1 convolution -> out_channels
        self.final_conv = nn.Conv2d(features[0], out_channels, kernel_size=1)

    def forward(self, x):

        #Encoder 
        skip_connection = []
        for down in self.downs:
            x = down(x) # pass through double conv 
            skip_connections.append(x) # Store feature map for skip connections
            x = self.pool(x) # reduce spatial dimention by 2 

        #Bottleneck 
        x = self.bottleneck(x)

        #Reverse the skip connections for easy indexing 
        skip _connections = skip_connections[::-1]

        #Decoder 
        for idx in range(0, len(self.ups), 2):
            #ups[idx] = transposed conv
            #upd[idx+1] = DoubleConv

            x = self.ups[idx](x)  # upsample the feature map 
            skip_connection = skip_connection[idx//2]

            # If dimensions don't match exactly (due to input sizes), interpolate
            if x.shape !=skip_connection.shape:
                x= f.interpolate(x, size-skip_connection.shape[2:])

            x = torch.cat((skip_connection,x), dim=1)
            x = self.ups[idx+1](x)  # Apply DoubleConv

        #Final 1x1 conv
        return self.final_conv(x)s

if __name__ == "__main__":
    model = UNet(in_channels = 3, out_channels=2)
    x = torch.randn(1,3,160,160) #example input 
    preds = model(x)
    print(preds.shape)