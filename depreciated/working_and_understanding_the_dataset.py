# -*- coding: utf-8 -*-
"""Working and Understanding the Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PT2Z6pNfKKeJ-a_Rr4lXg-N29kg5ZmZ-

# Load the Dataset
"""

import h5py

def explore_hdf5_file(hdf5_path):
    with h5py.File(hdf5_path, 'r') as file:
        print("Contents of the HDF5 file:")
        file.visititems(print_name_and_shape)

def print_name_and_shape(name, node):
    if isinstance(node, h5py.Dataset):
        print(f"Dataset Name: {name}")
        print(f"Dataset Shape: {node.shape}")
        print(f"Dataset Dtype: {node.dtype}")
        print("-" * 40)

# Path to your HDF5 file
hdf5_path = '/content/drive/MyDrive/Course Project - Img and Video/Data/dataset.hdf5'

# Explore the file
explore_hdf5_file(hdf5_path)

"""# Create a Train Loader For Training"""

import h5py
import torch
from torch.utils.data import Dataset, DataLoader
import numpy as np
class MRIDataset(Dataset):
    def __init__(self, file_path, org_dataset, csm_dataset, mask_dataset):
        self.file = h5py.File(file_path, 'r')
        self.org_data = self.file[org_dataset]
        self.csm_data = self.file[csm_dataset]
        self.mask_data = self.file[mask_dataset]

    def __len__(self):
        return self.org_data.shape[0]

    def __getitem__(self, idx):
        #print("Now loading the Data from the drive")
        org = torch.tensor(self.org_data[idx]).float()
        csm = torch.tensor(self.csm_data[idx]).float()
        mask = torch.tensor(self.mask_data[idx]).float()
        org_fft = torch.fft.fft2(org)
        #print("Creating the Undersampeled Data")
        undersampled = org_fft * mask
        undersampled_ifft = torch.fft.ifft2(undersampled)  # Inverse FFT to get undersampled image in spatial domain
        # Separate real and imaginary parts for model input
        undersampled_real = undersampled.real
        undersampled_imag = undersampled.imag

        #print(undersampled_imag)
        return undersampled_real, undersampled_imag, org, csm, mask

# Example usage
train_dataset = MRIDataset('/content/drive/MyDrive/Course Project - Img and Video/Data/dataset.hdf5', 'trnOrg', 'trnCsm', 'trnMask')
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)

def summarize_dataloader(dataloader):
    summary = {
        "Number of Batches": len(dataloader),
        "Batch Size": dataloader.batch_size,
        #"Shuffle": dataloader.shuffle,
        "Number of Workers": dataloader.num_workers,
        "Dataset Type": type(dataloader.dataset).__name__,
        "Dataset Length": len(dataloader.dataset)
    }
    return summary

# Example DataLoader
from torch.utils.data import DataLoader
from torch.utils.data import Dataset

# Assuming MRIDataset is defined as in the previous input
train_dataset = MRIDataset('/content/drive/MyDrive/Course Project - Img and Video/Data/dataset.hdf5', 'trnOrg', 'trnCsm', 'trnMask')
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)

# Summarize the DataLoader
summary = summarize_dataloader(train_loader)
summary

import matplotlib.pyplot as plt

# Load a single batch or image
train_dataset = MRIDataset('/content/drive/MyDrive/Course Project - Img and Video/Data/dataset.hdf5', 'trnOrg', 'trnCsm', 'trnMask')
train_loader = DataLoader(train_dataset, batch_size=1, shuffle=True)

# Get one sample
undersampled_real, undersampled_imag, org, csm, mask = next(iter(train_loader))

# Convert complex data to absolute values for visualization
org_abs = torch.abs(org)
csm_abs = torch.abs(csm)

# Display the original image
plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
# plt.imshow(org_abs[0].numpy(), cmap='gray')
plt.title('Original Image')
total = 0
# Display each coil image
for i in range(csm_abs.shape[1]):
    total += csm_abs[0,i]
    plt.subplot(4, 3, i + 1)  # Adjust subplot grid as needed
    plt.imshow(csm_abs[0, i].numpy(), cmap='gray')
    plt.title(f'Coil {i + 1}')

# plt.imshow(total.numpy(), cmap = 'gray')
plt.show()

plt.imshow(total.numpy(), cmap = 'gray')
plt.show()

# Display the original image
plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.imshow(org_abs[0].numpy(), cmap='gray')
plt.title('Original Image')

np.shape(undersampled.numpy())
np.shape(undersampled_abs)

np.shape(org)

"""# Create the Test Loader"""

test_dataset = MRIDataset('/content/drive/MyDrive/Course Project - Img and Video/Data/dataset.hdf5', 'tstOrg', 'tstCsm', 'tstMask')
test_loader = DataLoader(test_dataset, batch_size=2, shuffle=False)  # No need to shuffle for testing